Stack Machine Specification:

A stack machine consists of a STACK and a Memory. It can execute VM programs which are organized into 'functions' that are made of sequences of 4 possible commands:

- Arithmetic 
- Memory access
- Program flow
- Function calling

Each VM command is specified in the VM language as:
command (add), command arg (goto loop), command arg1 arg2 (push local 3)

Arithmetic Commands:
There are 9 arithmetic and logical commands, 7 binary and 2 unary. They pop the operands from the top of the stacks and push their specified operation.

Memory Access Commands:
There are two possible commands, push segment index (pushes value of segment[index] to stack) and pop segment index (pops the top stack value to segment[index]). There are 8 memory segments associated with different variable semantics.


Stack Machine Implementation:

The stack machine can be implemented thorugh:

- Mapping the structure of the VM (stack and memory) on the target platform.
- Providing a translator that converts VM commands into target platform commands that operate on the mapped structure. 

The translator thus acts as an implementation of the virtual machine by running the commands on a stack and heap (memory of the VM) mapped on the target platform.

Mapping:

    0-15 Sixteen Virtual Registers
    16-255 Static Variables
    256-2047 Stack
    2048-16483 Heap (Memory of the VM)
    16384-24575 Memory mapped I/O

The 0-15 registers map as follows:

    0 SP Points to the topmost location in the stack
    1 LCL Points to the base of the current VM function LOCAL segment
    2 ARG Points to the base of the current VM function ARGUMENT segment
    3 THIS Points to the base of the THIS segment
    4 THAT Points to the base of the THAT segment

    5-12 Holds contents of TEMP segment
    13-15 General purpose registers

